{"version":3,"sources":["components/NavBar.js","components/Banner.js","components/IconCard.js","App.js","serviceWorker.js","index.js"],"names":["style","bgDark","backgroundColor","NavBar","props","className","title","status","currentScore","topScore","logoIcon","width","heigth","Banner","src","alt","borderRadius","IconCard","id","value","onClick","clickedPlayer","image","shuffleArray","array","counter","length","index","Math","floor","random","temp","App","state","result","clicked","Icons","gameOver","console","log","includes","resetGame","pointIncrease","push","setState","score","resetIconArray","points","newScramble","this","map","icon","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb923fc3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst style = {\n  bgDark: {\n    backgroundColor: `rgb(1,0,1)`\n  }\n}\n\nconst NavBar = props => (\n  <header style={style.bgDark} className=\" w-100 ph3 pv3 pv2-ns ph4-m ph5-l tc\">\n    <nav className=\"f6 fw6 ttu tracked\">\n      <p className=\"link dim white dib mr3\"  title=\"Home\">The Game</p>\n      <p className=\"link dim white dib mr3\" >Status: {props.status}</p>\n      <p className=\"link dim white dib mr3\" title=\"Store\">Score: {props.currentScore}</p>\n      <p className=\"link dim white dib\" title=\"Contact\">Top Score: {props.topScore}</p>\n    </nav>\n  </header>\n)\n\nexport default NavBar;","import React from 'react';\n\nconst style = {\n  logoIcon: {\n    width: 450,\n    heigth: 400\n  },\n  bgDark: {\n    backgroundColor: `rgb(1,0,1)`\n  }\n}\n\nconst Banner = props => (\n  <article style={style.bgDark} className=\"mw7 center ph3 ph5-ns tc br2 pv3 bg-black-90 mb5 animated fadeIn\">\n    <img style={style.logoIcon} className='logoIcon' src=\"./img/tenor.gif\" alt=\"naruto\"/>\n    <h4 className=\"fw2 f4 lh-copy mt0 mb3 white animated fadeIn slower\">\n    Click on an image to earn points, but don't click on any more than once!\n    </h4>\n  </article>\n);\n\nexport default Banner;","import React from 'react';\n\nconst style = {\n  logoIcon: {\n    width: 150,\n    heigth: 100,\n    borderRadius: 400/ 2,\n    backgroundColor: \"white\",\n  }\n}\n\nconst IconCard = props => (\n  <section id={props.id} className=\"tc pa3 hvr-float-shadow animated zoomInUp\" value={props.id} onClick={() =>\n  props.clickedPlayer(props.id)\n  }>\n    <article className=\"w4 pa2\">\n      <img style={style.logoIcon} src={props.image} className=\"db\" alt=\"game-character\" />\n    </article>\n  </section>\n)\n\nexport default IconCard;","import React, { Component } from 'react';\nimport './App.css';\n\nimport NavBar from './components/NavBar';\nimport Banner from './components/Banner';\nimport IconCard from './components/IconCard';\nimport Icons from './icons.json';\nimport \"./components/IconCard.css\";\n\nconst shuffleArray = (array) => {\n  let counter = array.length;\n  while (counter > 0) {\n      let index = Math.floor(Math.random() * counter);\n      counter--;\n      let temp = array[counter];\n      array[counter] = array[index];\n      array[index] = temp;\n  }\n  return array;\n};\n\nclass App extends Component {\n\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    result: \"\",\n    clicked: [],\n    Icons,\n    gameOver: false\n  };\n\n  componentDidMount() {\n    this.setState({result: \"Click a player to get started\"})\n  }\n\n  clickedPlayer = (id) => {\n    console.log(`Picture clicked with id: ${id}`);\n    if(!this.state.clicked.includes(id)){\n      this.pointIncrease();\n      this.state.clicked.push(id);\n      this.setState({\n        gameOver: false\n      });\n    } else {\n      this.resetGame();\n    }\n  }\n\n  pointIncrease = () => {\n    let score = this.state.currentScore + 1;\n    console.log(`the score is ${score}`);\n    if (score === this.state.Icons.length) {\n      this.setState({\n        result: \"You win! Start clicking to play again!\",\n        topScore: score,\n        currentScore: 0,\n        clicked: [],\n        Icons,\n        gameOver: false\n      });\n    } else if (score > this.state.topScore) {\n      this.setState({\n        topScore: score,\n        currentScore: score,\n        result: \"Correct! New high score!\",\n      });\n    } else {\n      this.setState({\n        currentScore: score,\n        result: \"Correct!\"\n      });\n    }\n    this.resetIconArray();\n  }\n\n  resetGame = () => {\n    this.setState({\n      points: 0,\n      currentScore:0,\n      topScore: this.state.topScore,\n      result: \"You Loss!\",\n      clicked: [],\n      Icons,\n      gameOver: true\n    });\n    console.log('Game over? ', this.state.gameOver);\n    this.resetIconArray();\n  }\n\n  resetIconArray = () => {\n    let newScramble = shuffleArray(Icons);\n    this.setState({Icons: newScramble})\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <NavBar topScore={this.state.topScore} currentScore={this.state.currentScore} status={this.state.result}/>\n        <Banner />\n        <div className='mainStyle'>\n        {this.state.Icons.map(icon => (\n        <IconCard\n          id={icon.id}\n          image={icon.image}\n          clickedPlayer={this.clickedPlayer}\n        />\n        ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"tachyons\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}